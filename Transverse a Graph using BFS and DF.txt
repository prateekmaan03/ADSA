Transverse a Graph using BFS and DFS Algorithm

BFS Algorithm

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Graph {
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w); // Add w to v’s list
        adj[w].push_back(v); // Add v to w's list for undirected graph
    }

    // Function to perform BFS traversal
    void BFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;

        // Start from the specified node
        visited[start] = true;
        q.push(start);

        cout << "BFS Traversal: ";
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            cout << node << " ";

            // Visit all adjacent nodes
            for (int adjNode : adj[node]) {
                if (!visited[adjNode]) {
                    visited[adjNode] = true;
                    q.push(adjNode);
                }
            }
        }
        cout << endl;
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "Starting BFS from node 0:\n";
    g.BFS(0);

    return 0;
}



DFS Algorithm

#include <iostream>
#include <vector>
using namespace std;

class Graph {
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w); // Add w to v’s list
        adj[w].push_back(v); // Add v to w's list for undirected graph
    }

    // Helper function for DFS
    void DFSUtil(int node, vector<bool>& visited) {
        visited[node] = true;
        cout << node << " ";

        // Recur for all adjacent vertices of the current node
        for (int adjNode : adj[node]) {
            if (!visited[adjNode]) {
                DFSUtil(adjNode, visited);
            }
        }
    }

    // Function to perform DFS traversal
    void DFS(int start) {
        vector<bool> visited(V, false);
        cout << "DFS Traversal: ";
        DFSUtil(start, visited);
        cout << endl;
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "Starting DFS from node 0:\n";
    g.DFS(0);

    return 0;
}
