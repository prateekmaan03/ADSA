Solve Knapsack Problem using Greedy Technique

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item with weight and value
struct Item {
    int weight;
    int value;
};

// Comparator function to sort items by value-to-weight ratio
bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

// Function to perform Fractional Knapsack
double fractionalKnapsack(int W, vector<Item>& items) {
    // Sort items by descending value-to-weight ratio
    sort(items.begin(), items.end(), compare);

    double totalValue = 0.0; // Total value in knapsack

    for (auto &item : items) {
        // If item can fit entirely, take it
        if (item.weight <= W) {
            W -= item.weight;
            totalValue += item.value;
        } 
        // If item can't fit entirely, take the fractional part
        else {
            totalValue += item.value * ((double)W / item.weight);
            break; // Knapsack is full
        }
    }

    return totalValue;
}

int main() {
    int W = 50; // Knapsack capacity
    vector<Item> items = {{10, 60}, {20, 100}, {30, 120}};

    cout << "Maximum value in Knapsack = " << fractionalKnapsack(W, items) << endl;

    return 0;
}
